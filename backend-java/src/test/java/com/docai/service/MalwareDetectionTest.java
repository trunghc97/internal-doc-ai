package com.docai.service;

import com.docai.model.Document;
import com.docai.model.User;
import com.docai.repository.DocumentRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
@SpringJUnitConfig
public class MalwareDetectionTest {

    private DocumentService documentService;
    private MalwareDetectionService malwareDetectionService;
    
    @MockBean
    private DocumentRepository documentRepository;
    
    @MockBean
    private PythonApiService pythonApiService;
    
    private User testUser;

    @BeforeEach
    void setUp() {
        malwareDetectionService = new MalwareDetectionService();
        documentService = new DocumentService(documentRepository, pythonApiService, malwareDetectionService);
        
        testUser = new User();
        testUser.setId(1L);
        testUser.setUsername("testuser");
        testUser.setEmail("test@example.com");
    }

    @Test
    void testUploadCleanFile() throws Exception {
        // Mock repository save
        when(documentRepository.save(any(Document.class))).thenAnswer(invocation -> {
            Document doc = invocation.getArgument(0);
            doc.setId(1L);
            return doc;
        });

        // Test v·ªõi file PDF clean
        Document result = documentService.uploadDocumentFromTestFile("D·ªØ-li·ªáu-gi·∫£-1.pdf", testUser, null);
        
        assertNotNull(result);
        assertTrue(result.getSensitiveInfo().contains("MALWARE_SCAN: CLEAN"));
        System.out.println("‚úÖ Clean file test passed: " + result.getSensitiveInfo());
    }

    @Test
    void testUploadSuspiciousFile() {
        // Mock repository save
        when(documentRepository.save(any(Document.class))).thenAnswer(invocation -> {
            Document doc = invocation.getArgument(0);
            doc.setId(2L);
            return doc;
        });

        try {
            // Test v·ªõi file ch·ª©a m√£ ƒë·ªôc
            Document result = documentService.uploadDocumentFromTestFile("malware-test.txt", testUser, null);
            
            // N·∫øu file ƒë∆∞·ª£c upload (kh√¥ng b·ªã t·ª´ ch·ªëi), ki·ªÉm tra c√≥ c·∫£nh b√°o
            if (result != null) {
                assertTrue(result.getSensitiveInfo().contains("SUSPICIOUS") || 
                          result.getSensitiveInfo().contains("CLEAN"));
                System.out.println("‚ö†Ô∏è Suspicious file detected: " + result.getSensitiveInfo());
            }
        } catch (SecurityException e) {
            // File b·ªã t·ª´ ch·ªëi - ƒë√¢y l√† k·∫øt qu·∫£ mong mu·ªën
            assertTrue(e.getMessage().contains("m√£ ƒë·ªôc") || e.getMessage().contains("nguy hi·ªÉm"));
            System.out.println("üö´ Malicious file rejected: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("üìÅ Test file not found or other error: " + e.getMessage());
        }
    }

    @Test
    void testMalwareDetectionService() throws Exception {
        MalwareDetectionService service = new MalwareDetectionService();
        
        // Test v·ªõi n·ªôi dung s·∫°ch
        byte[] cleanContent = "This is a clean document content.".getBytes();
        DocumentService.MockMultipartFile cleanFile = 
            new DocumentService.MockMultipartFile("clean.txt", cleanContent, "text/plain");
        
        MalwareDetectionService.MalwareDetectionResult result = service.scanFile(cleanFile);
        
        assertNotNull(result);
        assertFalse(result.isThreatDetected());
        System.out.println("‚úÖ Clean content scan result: " + result.isClean());
        
        // Test v·ªõi n·ªôi dung ƒë√°ng nghi
        byte[] suspiciousContent = "eval('malicious code'); system('rm -rf /');".getBytes();
        DocumentService.MockMultipartFile suspiciousFile = 
            new DocumentService.MockMultipartFile("suspicious.txt", suspiciousContent, "text/plain");
        
        MalwareDetectionService.MalwareDetectionResult suspiciousResult = service.scanFile(suspiciousFile);
        
        assertNotNull(suspiciousResult);
        assertTrue(suspiciousResult.isSuspicious() || suspiciousResult.isThreatDetected());
        System.out.println("‚ö†Ô∏è Suspicious content detected: " + suspiciousResult.getWarnings());
    }
}
