from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import pdfplumber
from docx import Document
import re
from typing import List, Dict, Any
import os
from pydantic import BaseModel
import asyncio
from pathlib import Path
from .services.data_classifier import classify_sensitive_data, get_data_category

app = FastAPI(title="Document AI - Sensitive Info Detection")

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Regex patterns for sensitive information
PATTERNS = {
    "CMND/CCCD": r"\b\d{9}(?!\d)|\b\d{12}(?!\d)",  # 9 ho·∫∑c 12 s·ªë
    "MST": r"\b\d{10}(?!\d)|\b\d{13}(?!\d)",  # 10 ho·∫∑c 13 s·ªë
    "Bank Account": r"\b\d{8,16}(?!\d)",  # 8-16 s·ªë
    "Email": r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+",
    "Phone": r"(?:\b0|\+84)\d{9,10}\b",  # S·ªë ƒëi·ªán tho·∫°i VN
    "Enterprise Tax Code": r"\b\d{10}-\d{3}\b",  # M√£ s·ªë thu·∫ø doanh nghi·ªáp: 10 s·ªë - 3 s·ªë
    "Credit Card": r"\b(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})\b",  # C√°c lo·∫°i th·∫ª ph·ªï bi·∫øn
    "Social Insurance": r"\b\d{10,13}(?!\d)",  # S·ªë BHXH: 10-13 s·ªë
}

def extract_text_from_pdf(file_path: str) -> str:
    """Extract text from PDF file using pdfplumber"""
    text = ""
    try:
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                text += page.extract_text() or ""
        return text
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error extracting text from PDF: {str(e)}")

def extract_text_from_docx(file_path: str) -> str:
    """Extract text from DOCX file using python-docx"""
    try:
        doc = Document(file_path)
        return "\n".join([paragraph.text for paragraph in doc.paragraphs])
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error extracting text from DOCX: {str(e)}")

def find_sensitive_info(text: str) -> Dict[str, Any]:
    """Find sensitive information in text using both regex patterns and AI classification"""
    
    # T√¨m th√¥ng tin nh·∫°y c·∫£m b·∫±ng regex patterns (ph∆∞∆°ng ph√°p c≈©)
    regex_results = []
    for info_type, pattern in PATTERNS.items():
        matches = re.finditer(pattern, text)
        for match in matches:
            regex_results.append({
                "type": info_type,
                "value": match.group(),
                "start": match.start(),
                "end": match.end(),
                "detection_method": "regex"
            })
    
    # Ph√¢n lo·∫°i d·ªØ li·ªáu b·∫±ng AI classifier (ph∆∞∆°ng ph√°p m·ªõi)
    classification_result = classify_sensitive_data(text)
    
    return {
        "regex_detection": regex_results,
        "ai_classification": classification_result,
        "summary": {
            "total_regex_matches": len(regex_results),
            "ai_categories": list(classification_result["categories"]),
            "detected_types": classification_result["detected_types"]
        }
    }

@app.post("/detect")
async def detect_sensitive_info(file: UploadFile = File(...)):
    """
    Detect sensitive information in PDF or DOCX files
    """
    # Check file type
    if file.content_type not in [
        "application/pdf",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    ]:
        raise HTTPException(
            status_code=400,
            detail="Only PDF and DOCX files are supported"
        )

    try:
        # Create temp directory if not exists
        os.makedirs("temp", exist_ok=True)
        
        # Save uploaded file
        file_path = f"temp/{file.filename}"
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # Extract text based on file type
        if file.content_type == "application/pdf":
            text = extract_text_from_pdf(file_path)
        else:
            text = extract_text_from_docx(file_path)
        
        # Clean up temp file
        os.remove(file_path)
        
        # Find sensitive information
        detection_result = find_sensitive_info(text)
        
        return {
            "detection_result": detection_result,
            # Gi·ªØ l·∫°i format c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch
            "sensitive_info": detection_result["regex_detection"]
        }

    except Exception as e:
        # Clean up temp file in case of error
        if os.path.exists(file_path):
            os.remove(file_path)
        raise HTTPException(status_code=500, detail=str(e))

async def test_detect_with_sample_file():
    """
    H√†m test ƒë·ªÉ gi·∫£ l·∫≠p vi·ªác g·ªçi detect_sensitive_info v·ªõi file PDF m·∫´u
    """
    try:
        # ƒê∆∞·ªùng d·∫´n t·ªõi file PDF m·∫´u
        sample_file_path = Path(__file__).parent.parent / "files" / "D·ªØ li·ªáu gi·∫£ 1.pdf"
        # sample_file_path = Path(__file__).parent.parent / "files" / "D·ªØ li·ªáu gi·∫£ 5.docx"
        
        if not sample_file_path.exists():
            print(f"‚ö†Ô∏è File m·∫´u kh√¥ng t·ªìn t·∫°i: {sample_file_path}")
            return
        
        print(f"üß™ B·∫Øt ƒë·∫ßu test v·ªõi file: {sample_file_path}")
        
        text = extract_text_from_pdf(str(sample_file_path))
        print(f"üìÑ ƒê√£ extract text t·ª´ file, ƒë·ªô d√†i: {len(text)} k√Ω t·ª±")

        print(f"üìÑ ƒê√£ extract text t·ª´ file: {text}")
        
        # T√¨m th√¥ng tin nh·∫°y c·∫£m
        detection_result = find_sensitive_info(text)
        
        print(f"üîç K·∫øt qu·∫£ ph√°t hi·ªán:")
        print(f"   üìä T√≥m t·∫Øt:")
        print(f"     - Regex matches: {detection_result['summary']['total_regex_matches']}")
        print(f"     - AI categories: {', '.join(detection_result['summary']['ai_categories'])}")
        print(f"     - Detected types: {len(detection_result['summary']['detected_types'])}")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ regex
        regex_results = detection_result["regex_detection"]
        if regex_results:
            print(f"   üéØ Chi ti·∫øt Regex Detection ({len(regex_results)} matches):")
            for info in regex_results:
                print(f"     ‚Ä¢ {info['type']}: {info['value']} (v·ªã tr√≠: {info['start']}-{info['end']})")
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ AI classification
        ai_result = detection_result["ai_classification"]
        if ai_result["details"]:
            print(f"   ü§ñ Chi ti·∫øt AI Classification:")
            for detail in ai_result["details"]:
                print(f"     ‚Ä¢ {detail['type']}")
                print(f"       Categories: {', '.join(detail['categories'])}")
                print(f"       Matches: {', '.join(detail['matches'])}")
        else:
            print("   ü§ñ AI Classification: Kh√¥ng ph√°t hi·ªán lo·∫°i d·ªØ li·ªáu nh·∫°y c·∫£m n√†o")
        
        print("‚úÖ Test ho√†n th√†nh th√†nh c√¥ng!")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh test: {str(e)}")

@app.on_event("startup")
async def startup_event():
    """Event ƒë∆∞·ª£c g·ªçi khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông"""
    print("üöÄ ·ª®ng d·ª•ng Document AI ƒëang kh·ªüi ƒë·ªông...")
    
    # Ch·∫°y test v·ªõi file m·∫´u
    await test_detect_with_sample_file()
    
    print("‚ú® ·ª®ng d·ª•ng ƒë√£ s·∫µn s√†ng!")

class TextRequest(BaseModel):
    text: str

@app.post("/classify-text")
async def classify_text_endpoint(request: TextRequest):
    """
    Endpoint ƒë·ªÉ ph√¢n lo·∫°i d·ªØ li·ªáu nh·∫°y c·∫£m t·ª´ text tr·ª±c ti·∫øp
    """
    text = request.text
    if not text or not text.strip():
        raise HTTPException(status_code=400, detail="Text kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    try:
        # Ph√¢n lo·∫°i b·∫±ng AI classifier
        classification_result = classify_sensitive_data(text)
        simple_category = get_data_category(text)
        
        return {
            "input_text": text,
            "simple_classification": simple_category,
            "detailed_classification": classification_result,
            "summary": {
                "categories": list(classification_result["categories"]),
                "detected_types_count": len(classification_result["detected_types"]),
                "is_sensitive": simple_category != "Kh√¥ng ph√¢n lo·∫°i"
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói ph√¢n lo·∫°i: {str(e)}")

@app.get("/health")
def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}

@app.get("/categories")
def get_all_categories():
    """Endpoint ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ c√°c lo·∫°i d·ªØ li·ªáu nh·∫°y c·∫£m"""
    from .services.data_classifier import classifier
    return {
        "categories": classifier.list_all_categories(),
        "total_types": len(classifier.data_types)
    }
