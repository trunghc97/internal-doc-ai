{"ast":null,"code":"import _asyncToGenerator from \"/Users/huy/Documents/internal-doc-ai/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let EncryptionService = /*#__PURE__*/(() => {\n  var _EncryptionService;\n  class EncryptionService {\n    encrypt(publicKeyBase64, text) {\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('Starting encryption process...');\n          console.log('Public key (base64):', publicKeyBase64);\n          // Convert base64 to binary\n          const binaryDer = window.atob(publicKeyBase64);\n          const keyBytes = new Uint8Array(binaryDer.length);\n          for (let i = 0; i < binaryDer.length; i++) {\n            keyBytes[i] = binaryDer.charCodeAt(i);\n          }\n          console.log('Public key bytes:', keyBytes);\n          // Import public key\n          const publicKey = yield window.crypto.subtle.importKey('spki', keyBytes, {\n            name: 'RSA-OAEP',\n            hash: {\n              name: 'SHA-256'\n            }\n          }, false, ['encrypt']);\n          console.log('Public key imported successfully');\n          // Prepare data for encryption\n          const textBytes = new TextEncoder().encode(text);\n          console.log('Text bytes:', textBytes);\n          // Encrypt data\n          const encrypted = yield window.crypto.subtle.encrypt({\n            name: 'RSA-OAEP'\n          }, publicKey, textBytes);\n          console.log('Encryption successful');\n          // Convert to base64\n          const encryptedBase64 = window.btoa(String.fromCharCode(...new Uint8Array(encrypted)));\n          console.log('Encrypted data (base64):', encryptedBase64);\n          return encryptedBase64;\n        } catch (error) {\n          console.error('Encryption failed:', error);\n          throw new Error('Failed to encrypt data');\n        }\n      })();\n    }\n  }\n  _EncryptionService = EncryptionService;\n  _EncryptionService.ɵfac = function EncryptionService_Factory(t) {\n    return new (t || _EncryptionService)();\n  };\n  _EncryptionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _EncryptionService,\n    factory: _EncryptionService.ɵfac,\n    providedIn: 'root'\n  });\n  return EncryptionService;\n})();","map":{"version":3,"names":["EncryptionService","_EncryptionService","encrypt","publicKeyBase64","text","_asyncToGenerator","console","log","binaryDer","window","atob","keyBytes","Uint8Array","length","i","charCodeAt","publicKey","crypto","subtle","importKey","name","hash","textBytes","TextEncoder","encode","encrypted","encryptedBase64","btoa","String","fromCharCode","error","Error","factory","ɵfac","providedIn"],"sources":["/Users/huy/Documents/internal-doc-ai/frontend/src/app/services/encryption.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EncryptionService {\n\n  async encrypt(publicKeyBase64: string, text: string): Promise<string> {\n    try {\n      console.log('Starting encryption process...');\n      console.log('Public key (base64):', publicKeyBase64);\n\n      // Convert base64 to binary\n      const binaryDer = window.atob(publicKeyBase64);\n      const keyBytes = new Uint8Array(binaryDer.length);\n      for (let i = 0; i < binaryDer.length; i++) {\n        keyBytes[i] = binaryDer.charCodeAt(i);\n      }\n      console.log('Public key bytes:', keyBytes);\n\n      // Import public key\n      const publicKey = await window.crypto.subtle.importKey(\n        'spki',\n        keyBytes,\n        {\n          name: 'RSA-OAEP',\n          hash: { name: 'SHA-256' }\n        },\n        false,\n        ['encrypt']\n      );\n      console.log('Public key imported successfully');\n\n      // Prepare data for encryption\n      const textBytes = new TextEncoder().encode(text);\n      console.log('Text bytes:', textBytes);\n\n      // Encrypt data\n      const encrypted = await window.crypto.subtle.encrypt(\n        {\n          name: 'RSA-OAEP'\n        },\n        publicKey,\n        textBytes\n      );\n      console.log('Encryption successful');\n\n      // Convert to base64\n      const encryptedBase64 = window.btoa(String.fromCharCode(...new Uint8Array(encrypted)));\n      console.log('Encrypted data (base64):', encryptedBase64);\n\n      return encryptedBase64;\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error('Failed to encrypt data');\n    }\n  }\n}\n"],"mappings":";;AAKA,WAAaA,iBAAiB;EAAA,IAAAC,kBAAA;EAAxB,MAAOD,iBAAiB;IAEtBE,OAAOA,CAACC,eAAuB,EAAEC,IAAY;MAAA,OAAAC,iBAAA;QACjD,IAAI;UACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;UAC7CD,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,eAAe,CAAC;UAEpD;UACA,MAAMK,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACP,eAAe,CAAC;UAC9C,MAAMQ,QAAQ,GAAG,IAAIC,UAAU,CAACJ,SAAS,CAACK,MAAM,CAAC;UACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;YACzCH,QAAQ,CAACG,CAAC,CAAC,GAAGN,SAAS,CAACO,UAAU,CAACD,CAAC,CAAC;;UAEvCR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEI,QAAQ,CAAC;UAE1C;UACA,MAAMK,SAAS,SAASP,MAAM,CAACQ,MAAM,CAACC,MAAM,CAACC,SAAS,CACpD,MAAM,EACNR,QAAQ,EACR;YACES,IAAI,EAAE,UAAU;YAChBC,IAAI,EAAE;cAAED,IAAI,EAAE;YAAS;WACxB,EACD,KAAK,EACL,CAAC,SAAS,CAAC,CACZ;UACDd,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAE/C;UACA,MAAMe,SAAS,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACpB,IAAI,CAAC;UAChDE,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEe,SAAS,CAAC;UAErC;UACA,MAAMG,SAAS,SAAShB,MAAM,CAACQ,MAAM,CAACC,MAAM,CAAChB,OAAO,CAClD;YACEkB,IAAI,EAAE;WACP,EACDJ,SAAS,EACTM,SAAS,CACV;UACDhB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UAEpC;UACA,MAAMmB,eAAe,GAAGjB,MAAM,CAACkB,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAIjB,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC;UACtFnB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEmB,eAAe,CAAC;UAExD,OAAOA,eAAe;SACvB,CAAC,OAAOI,KAAK,EAAE;UACdxB,OAAO,CAACwB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1C,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;;MAC1C;IACH;;uBAnDW/B,iBAAiB;;qBAAjBA,kBAAiB;EAAA;;WAAjBA,kBAAiB;IAAAgC,OAAA,EAAjBhC,kBAAiB,CAAAiC,IAAA;IAAAC,UAAA,EAFhB;EAAM;EAAA,OAEPlC,iBAAiB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}