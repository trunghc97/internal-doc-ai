{"ast":null,"code":"import _asyncToGenerator from \"/Users/huy/Documents/internal-doc-ai/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _AuthService;\n  class AuthService {\n    constructor(apiService, router) {\n      this.apiService = apiService;\n      this.router = router;\n      this.userSubject = new BehaviorSubject(this.getUserFromStorage());\n      this.user$ = this.userSubject.asObservable();\n      this.isAuthenticated$ = this.userSubject.pipe(tap(user => !!user));\n    }\n    get user() {\n      return this.userSubject.value;\n    }\n    get isAuthenticated() {\n      return !!this.user;\n    }\n    login(username, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this.apiService.login({\n            username,\n            password\n          });\n          // Extract user data from response\n          const userData = {\n            id: response.id || response.user?.id || '',\n            username: response.username || response.user?.username || username,\n            email: response.email || response.user?.email || '',\n            token: response.token || response.access_token || ''\n          };\n          _this.setUser(userData);\n          return response;\n        } catch (error) {\n          console.error('Login failed:', error);\n          throw error;\n        }\n      })();\n    }\n    register(email, username, password) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('Starting registration process...');\n          console.log('Data:', {\n            email,\n            username,\n            password: '***'\n          });\n          const response = yield _this2.apiService.register({\n            email,\n            username,\n            password\n          });\n          console.log('Registration successful:', response);\n          // Extract user data from response\n          const userData = {\n            id: response.id || response.user?.id || '',\n            username: response.username || response.user?.username || username,\n            email: response.email || response.user?.email || email,\n            token: response.token || response.access_token || ''\n          };\n          _this2.setUser(userData);\n          return response;\n        } catch (error) {\n          console.error('Registration failed:', error);\n          throw error;\n        }\n      })();\n    }\n    logout() {\n      this.setUser(null);\n      this.router.navigate(['/login']);\n    }\n    setUser(user) {\n      this.userSubject.next(user);\n      if (user) {\n        localStorage.setItem('auth-storage', JSON.stringify({\n          state: {\n            user\n          }\n        }));\n      } else {\n        localStorage.removeItem('auth-storage');\n      }\n    }\n    getUserFromStorage() {\n      const authStorage = localStorage.getItem('auth-storage');\n      if (authStorage) {\n        try {\n          const parsed = JSON.parse(authStorage);\n          return parsed?.state?.user || null;\n        } catch {\n          return null;\n        }\n      }\n      return null;\n    }\n  }\n  _AuthService = AuthService;\n  _AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || _AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n  };\n  _AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthService,\n    factory: _AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","_AuthService","constructor","apiService","router","userSubject","getUserFromStorage","user$","asObservable","isAuthenticated$","pipe","user","value","isAuthenticated","login","username","password","_this","_asyncToGenerator","response","userData","id","email","token","access_token","setUser","error","console","register","_this2","log","logout","navigate","next","localStorage","setItem","JSON","stringify","state","removeItem","authStorage","getItem","parsed","parse","i0","ɵɵinject","i1","ApiService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/huy/Documents/internal-doc-ai/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap, catchError, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private userSubject = new BehaviorSubject<User | null>(this.getUserFromStorage());\n  public user$ = this.userSubject.asObservable();\n  public isAuthenticated$ = this.userSubject.pipe(\n    tap(user => !!user)\n  );\n\n  constructor(\n    private apiService: ApiService,\n    private router: Router\n  ) {}\n\n  get user(): User | null {\n    return this.userSubject.value;\n  }\n\n  get isAuthenticated(): boolean {\n    return !!this.user;\n  }\n\n  async login(username: string, password: string): Promise<any> {\n    try {\n      const response = await this.apiService.login({ username, password });\n\n      // Extract user data from response\n      const userData = {\n        id: response.id || response.user?.id || '',\n        username: response.username || response.user?.username || username,\n        email: response.email || response.user?.email || '',\n        token: response.token || response.access_token || ''\n      };\n\n      this.setUser(userData);\n      return response;\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }\n\n  async register(email: string, username: string, password: string): Promise<any> {\n    try {\n      console.log('Starting registration process...');\n      console.log('Data:', { email, username, password: '***' });\n\n      const response = await this.apiService.register({ email, username, password });\n\n      console.log('Registration successful:', response);\n\n      // Extract user data from response\n      const userData = {\n        id: response.id || response.user?.id || '',\n        username: response.username || response.user?.username || username,\n        email: response.email || response.user?.email || email,\n        token: response.token || response.access_token || ''\n      };\n\n      this.setUser(userData);\n      return response;\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  }\n\n  logout(): void {\n    this.setUser(null);\n    this.router.navigate(['/login']);\n  }\n\n  private setUser(user: User | null): void {\n    this.userSubject.next(user);\n    if (user) {\n      localStorage.setItem('auth-storage', JSON.stringify({\n        state: { user }\n      }));\n    } else {\n      localStorage.removeItem('auth-storage');\n    }\n  }\n\n  private getUserFromStorage(): User | null {\n    const authStorage = localStorage.getItem('auth-storage');\n    if (authStorage) {\n      try {\n        const parsed = JSON.parse(authStorage);\n        return parsed?.state?.user || null;\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}