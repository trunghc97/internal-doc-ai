{"ast":null,"code":"import _asyncToGenerator from \"/Users/huy/Documents/internal-doc-ai/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./encryption.service\";\nexport let ApiService = /*#__PURE__*/(() => {\n  var _ApiService;\n  class ApiService {\n    constructor(http, router, encryptionService) {\n      this.http = http;\n      this.router = router;\n      this.encryptionService = encryptionService;\n      this.baseUrl = 'http://192.168.0.63';\n      this.llmBaseUrl = 'http://192.168.0.63';\n      this.setupInterceptors();\n    }\n    setupInterceptors() {\n      // Request interceptor logic will be handled by Angular HttpInterceptor\n    }\n    handleError(error) {\n      if (error.status === 401) {\n        localStorage.removeItem('auth-storage');\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    }\n    // Auth APIs\n    getPublicKey() {\n      return this.http.get(`${this.baseUrl}/auth/public-key`).pipe(catchError(this.handleError.bind(this)));\n    }\n    login(data) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const publicKeyResponse = yield _this.getPublicKey().toPromise();\n          const publicKey = publicKeyResponse.publicKey;\n          const encryptedPassword = yield _this.encryptionService.encrypt(publicKey, data.password);\n          // Convert Observable to Promise\n          return _this.http.post(`${_this.baseUrl}/auth/login`, {\n            username: data.username,\n            password: encryptedPassword\n          }).pipe(catchError(_this.handleError.bind(_this))).toPromise();\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    register(data) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // console.log('Getting public key...');\n          // const publicKeyResponse = await this.getPublicKey().toPromise();\n          // console.log('Public key response:', publicKeyResponse);\n          const publicKey = `MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkeynfKnC4SZd6kQRNB4B\n        oUYM1XOlKcgah/RTcE0MWeMtIT1zkF1dLRS2EXaBpTe4MYcJPM1hwYQsWavCpPwd\n        +SWKji/FhIYx4cVmRl34gb0f0tAJsFBpc6sUFrmRxlysw9l10WmZORypS/p6ie3V\n        4xjx83ys1eztH0CcNPuSrNy4RlGT0Mo+1IvshzV3ys/UKecBuQtI2XdSz9EJKgyy\n        48B15tEqoakE4FmhoD2ISNFq8l0tWF7Z94gXKg+SKS2jtQYHw4VtciRkA9UHEOlc\n        x8F2xkX+3TfGagyxkRAbuj2AYajzRjxQhl/aUBbxxKhiByaiQVT6/CnFSpAfqs9U\n        HwIDAQAB`;\n          console.log('Encrypting password...');\n          const encryptedPassword = yield _this2.encryptionService.encrypt(publicKey, data.password);\n          console.log('Password encrypted successfully');\n          console.log('Sending registration request...');\n          return _this2.http.post(`${_this2.baseUrl}/auth/register`, {\n            email: data.email,\n            username: data.username,\n            password: encryptedPassword\n          }).pipe(catchError(_this2.handleError.bind(_this2))).toPromise();\n        } catch (error) {\n          console.error('Registration error:', error);\n          throw error;\n        }\n      })();\n    }\n    // Points APIs\n    getBalance() {\n      return this.http.get(`${this.baseUrl}/points/balance`).pipe(catchError(this.handleError.bind(this)));\n    }\n    getTransactionHistory() {\n      return this.http.get(`${this.baseUrl}/points/history`).pipe(catchError(this.handleError.bind(this)));\n    }\n    earnPoints(data) {\n      return this.http.post(`${this.baseUrl}/points/earn`, data).pipe(catchError(this.handleError.bind(this)));\n    }\n    redeemPoints(data) {\n      return this.http.post(`${this.baseUrl}/points/redeem`, data).pipe(catchError(this.handleError.bind(this)));\n    }\n    transferPoints(recipient, data) {\n      return this.http.post(`${this.baseUrl}/points/transfer/${recipient}`, data).pipe(catchError(this.handleError.bind(this)));\n    }\n    tradePoints(data) {\n      return this.http.post(`${this.baseUrl}/points/trade`, data).pipe(catchError(this.handleError.bind(this)));\n    }\n    payWithPoints(data) {\n      return this.http.post(`${this.baseUrl}/points/pay`, data).pipe(catchError(this.handleError.bind(this)));\n    }\n    // LLM Chat APIs\n    chat(messages) {\n      return this.http.post(`${this.llmBaseUrl}/chat`, {\n        messages\n      }).pipe(catchError(this.handleError.bind(this)));\n    }\n    getLlmHealth() {\n      return this.http.get(`${this.llmBaseUrl}/health`).pipe(catchError(this.handleError.bind(this)));\n    }\n  }\n  _ApiService = ApiService;\n  _ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || _ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.EncryptionService));\n  };\n  _ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _ApiService,\n    factory: _ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":{"version":3,"names":["throwError","catchError","ApiService","_ApiService","constructor","http","router","encryptionService","baseUrl","llmBaseUrl","setupInterceptors","handleError","error","status","localStorage","removeItem","navigate","getPublicKey","get","pipe","bind","login","data","_this","_asyncToGenerator","publicKeyResponse","toPromise","publicKey","encryptedPassword","encrypt","password","post","username","register","_this2","console","log","email","getBalance","getTransactionHistory","earnPoints","redeemPoints","transferPoints","recipient","tradePoints","payWithPoints","chat","messages","getLlmHealth","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","EncryptionService","factory","ɵfac","providedIn"],"sources":["/Users/huy/Documents/internal-doc-ai/frontend/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { EncryptionService } from './encryption.service';\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface PointsTransaction {\n  amount: number;\n  description: string;\n}\n\nexport interface TransferRequest extends PointsTransaction {\n  recipient: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl = 'http://192.168.0.63';\n  private llmBaseUrl = 'http://192.168.0.63';\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private encryptionService: EncryptionService\n  ) {\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors(): void {\n    // Request interceptor logic will be handled by Angular HttpInterceptor\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error.status === 401) {\n      localStorage.removeItem('auth-storage');\n      this.router.navigate(['/login']);\n    }\n    return throwError(() => error);\n  }\n\n  // Auth APIs\n  getPublicKey(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/auth/public-key`)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  async login(data: LoginRequest): Promise<any> {\n    try {\n      const publicKeyResponse = await this.getPublicKey().toPromise();\n      const publicKey = publicKeyResponse.publicKey;\n      const encryptedPassword = await this.encryptionService.encrypt(publicKey, data.password);\n\n      // Convert Observable to Promise\n      return this.http.post(`${this.baseUrl}/auth/login`, {\n        username: data.username,\n        password: encryptedPassword\n      }).pipe(catchError(this.handleError.bind(this))).toPromise();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async register(data: RegisterRequest): Promise<any> {\n    try {\n      // console.log('Getting public key...');\n      // const publicKeyResponse = await this.getPublicKey().toPromise();\n      // console.log('Public key response:', publicKeyResponse);\n\n      const publicKey = `MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkeynfKnC4SZd6kQRNB4B\n        oUYM1XOlKcgah/RTcE0MWeMtIT1zkF1dLRS2EXaBpTe4MYcJPM1hwYQsWavCpPwd\n        +SWKji/FhIYx4cVmRl34gb0f0tAJsFBpc6sUFrmRxlysw9l10WmZORypS/p6ie3V\n        4xjx83ys1eztH0CcNPuSrNy4RlGT0Mo+1IvshzV3ys/UKecBuQtI2XdSz9EJKgyy\n        48B15tEqoakE4FmhoD2ISNFq8l0tWF7Z94gXKg+SKS2jtQYHw4VtciRkA9UHEOlc\n        x8F2xkX+3TfGagyxkRAbuj2AYajzRjxQhl/aUBbxxKhiByaiQVT6/CnFSpAfqs9U\n        HwIDAQAB`;\n      console.log('Encrypting password...');\n      const encryptedPassword = await this.encryptionService.encrypt(publicKey, data.password);\n      console.log('Password encrypted successfully');\n\n      console.log('Sending registration request...');\n      return this.http.post(`${this.baseUrl}/auth/register`, {\n        email: data.email,\n        username: data.username,\n        password: encryptedPassword\n      }).pipe(catchError(this.handleError.bind(this))).toPromise();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  // Points APIs\n  getBalance(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/points/balance`)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  getTransactionHistory(): Observable<any> {\n    return this.http.get(`${this.baseUrl}/points/history`)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  earnPoints(data: PointsTransaction): Observable<any> {\n    return this.http.post(`${this.baseUrl}/points/earn`, data)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  redeemPoints(data: PointsTransaction): Observable<any> {\n    return this.http.post(`${this.baseUrl}/points/redeem`, data)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  transferPoints(recipient: string, data: PointsTransaction): Observable<any> {\n    return this.http.post(`${this.baseUrl}/points/transfer/${recipient}`, data)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  tradePoints(data: { amount: number }): Observable<any> {\n    return this.http.post(`${this.baseUrl}/points/trade`, data)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  payWithPoints(data: { amount: number }): Observable<any> {\n    return this.http.post(`${this.baseUrl}/points/pay`, data)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  // LLM Chat APIs\n  chat(messages: Array<{role: string, content: string}>): Observable<any> {\n    return this.http.post(`${this.llmBaseUrl}/chat`, { messages })\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n\n  getLlmHealth(): Observable<any> {\n    return this.http.get(`${this.llmBaseUrl}/health`)\n      .pipe(catchError(this.handleError.bind(this)));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}